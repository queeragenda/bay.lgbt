// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_PRISMA_URL")
}

// UrlSource are for sources of events that are fetchible by a single URL.
// Stored URLs should not include things like API keys, this should be added to
// the URL at the time the fetch request is placed.
model UrlSource {
  id             Int      @id @default(autoincrement())
  sourceID       String?
  sourceType     String
  sourceName     String
  sourceCity     String
  url            String
  lastScraped    DateTime
  etagLastScrape String?

  events UrlEvent[]
}

model UrlEvent {
  id       Int @id @default(autoincrement())
  sourceId Int

  title         String
  start         DateTime
  end           DateTime
  url           String   @unique
  createdAt     DateTime @default(now())
  extendedProps String?

  source UrlSource       @relation(fields: [sourceId], references: [id])
  images UrlEventImage[]
}

model UrlEventImage {
  id          Int      @id @default(autoincrement())
  url         String
  eventID     Int
  event       UrlEvent @relation(fields: [eventID], references: [id])
  contentType String
  data        Bytes
}

model InstagramEventOrganizer {
  id            Int              @id @default(autoincrement())
  username      String           @unique
  city          String
  contextClues  String
  events        InstagramEvent[]
  createdAt     DateTime         @default(now())
  lastUpdated   DateTime         @default(now())
  InstagramPost InstagramPost[]
}

model InstagramImage {
  id            Int           @id @default(autoincrement())
  url           String
  postID        String
  InstagramPost InstagramPost @relation(fields: [postID], references: [id])
  data          Bytes
}

model InstagramPost {
  // Instagram Post ID, from Instagram
  id      String           @id
  url     String
  caption String
  images  InstagramImage[]

  organizer   InstagramEventOrganizer @relation(fields: [organizerId], references: [id])
  organizerId Int
  postDate    DateTime // The time the post was posted to Instagram
  createdAt   DateTime                @default(now()) // The time that we first saw this post in our scraping
  completedAt DateTime? // Timestamp we finished the extraction job, null if not completed

  InstagramEvent InstagramEvent?
}

model InstagramEvent {
  // Instagram Post ID, from Instagram
  postID      String                  @id
  title       String
  start       DateTime
  end         DateTime
  url         String
  organizer   InstagramEventOrganizer @relation(fields: [organizerId], references: [id])
  organizerId Int
  createdAt   DateTime                @default(now())
  post        InstagramPost           @relation(fields: [postID], references: [id])

  @@index([organizerId])
}
